# -*- coding: utf-8 -*-
"""mangoDB_assignment.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1vF0dQawF4fbJH70mw77OOl-CEwjVplYy
"""

"""
Ans 1.

MongoDB is a NoSQL, document-based database that stores data in JSON-like BSON format, allowing for flexible schema design.
Non-relational databases (NoSQL) differ from traditional SQL databases by using flexible data models, such as document, key-value, and graph models. They donâ€™t require a predefined schema and can scale horizontally, making them ideal for unstructured or semi-structured data.

MongoDB is preferred over SQL databases when:
- The data structure is dynamic or may change over time.
- High scalability and real-time data processing are needed.
- Rapid application development is required with flexible data models.
- Handling large volumes of data in a distributed environment.
"""

"""

Ans 2.

- Schema Flexibility: MongoDB uses a flexible schema, allowing each document to have different fields.
- Document-Based: Data is stored in BSON documents, similar to JSON, enabling embedded data structures.
- High Performance: MongoDB provides fast access to data with efficient indexing and queries.
- Scalability: MongoDB supports horizontal scaling across multiple servers.
- Aggregation Framework: Allows for advanced data processing and analysis.
- Replication: Supports data redundancy and availability with replica sets.
- Indexing: Various indexing options to improve query performance.

"""

## Ans 3.

from pymongo import MongoClient

# Connect to MongoDB
client = MongoClient("mongodb://localhost:27017/")

# Create a new database and collection
db = client["my_database"]  # creates or connects to a database called 'my_database'
collection = db["my_collection"]  # creates or connects to a collection called 'my_collection'

print("Database and collection created!")


## Ans 4.

# Insert a single record
single_record = {"name": "Alice", "age": 30, "city": "New York"}
collection.insert_one(single_record)

# Insert multiple records
multiple_records = [
    {"name": "Bob", "age": 25, "city": "Los Angeles"},
    {"name": "Carol", "age": 35, "city": "Chicago"},
    {"name": "Dave", "age": 40, "city": "Miami"}
]
collection.insert_many(multiple_records)

# Find and print one record
print("Single record:", collection.find_one())

# Find and print all records
print("All records:")
for record in collection.find():
    print(record)


## Ans 5.


# Find all records where age is greater than 30
query = {"age": {"$gt": 30}}
results = collection.find(query)

print("Records with age > 30:")
for record in results:
    print(record)


## Ans 6.

# Sort records by age in ascending order
sorted_records = collection.find().sort("age", 1)

print("Records sorted by age in ascending order:")
for record in sorted_records:
    print(record)

"""

## Ans 7.

- delete_one(): Deletes the first document that matches the filter criteria.
  Example: collection.delete_one({"name": "Alice"})

- delete_many(): Deletes all documents that match the filter criteria.
  Example: collection.delete_many({"city": "New York"})

- drop(): Removes an entire collection from the database.
  Example: collection.drop()
"""